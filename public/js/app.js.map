{"version":3,"file":"public/js/app.js","sources":["app/app.js","app/js/controllers/AppCtrl.js","app/js/controllers/HeaderCtrl.js","app/js/controllers/LandingCtrl.js","app/js/controllers/MapCtrl.js","app/js/controllers/ReviewCtrl.js","app/js/controllers/ReviewHeaderCtrl.js","app/js/controllers/ReviewMapCtrl.js","app/js/directives/appVersion.js","app/js/filters/interpolate.js","app/js/services/locations.js","app/js/services/version.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5BA;AACA;AACA;AACA;AACA;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["'use strict';\n\n// Declare app level module which depends on filters, and services\nvar App = angular.module('app', ['ngSanitize', 'ngResource', 'ui.router', 'oc.modal', 'google-maps']);\n\nApp.config(['$stateProvider', '$locationProvider', '$urlRouterProvider',\n\tfunction($stateProvider, $locationProvider, $urlRouterProvider) {\n\t\t$locationProvider.hashPrefix('!');\n\t\t$urlRouterProvider.otherwise(\"/landing\");\n\n\t\t$stateProvider.state('landing', {\n\t\t   url: \"/landing\",\n\t\t   views: {\n\t\t       \"headerView\" : {\n\t\t       templateUrl: \"partials/header.html\",\n\t\t       controller: 'HeaderCtrl'\n\t\t       },\n\t\t       \"mapView\": {\n\t\t           templateUrl: \"partials/landing-map.html\",\n\t\t           controller: 'MapCtrl'\n\t\t       },\n\t\t       \"mainView\": {\n\t\t           templateUrl: \"partials/landing.html\",\n\t\t           controller: 'LandingCtrl'\n\t\t       }\n\t\t   }\n\t\t}).state('review', {\n\t\t\turl: \"/review/:locationId\",\n\t\t\tviews: {\n               \"headerView\" : {\n\t\t       templateUrl:'partials/review-header.html',\n\t\t       controller: 'ReviewHeaderCtrl'\n\t\t       },\n\t\t       \"mapView\": {\n\t\t           templateUrl: \"partials/review-map.html\",\n\t\t           controller: 'ReviewMapCtrl'\n\t\t       },\n\t\t       \"mainView\": {\n\t\t           templateUrl: \"partials/review.html\",\n\t\t           controller: 'ReviewCtrl'\n\t\t       }\n\t\t\t}\n\t\t});\n\n\t\t// Without server side support html5 must be disabled.\n\t\treturn $locationProvider.html5Mode(false);\n\t}\n]);","App.controller('AppCtrl', [\n\t'$scope', '$location', '$resource', '$rootScope', function($scope, $location, $resource, $rootScope) {\n\t\t// Uses the url to determine if the selected\n\t\t// menu item should have the class active.\n\t\t\n\t\t\n        \n\t\t$scope.$location = $location;\n\t\t$scope.$watch('$location.path()', function(path) {\n\t\t\treturn $scope.activeNavId = path || '/';\n\t\t});\n\t\t/* getClass compares the current url with the id.\n\t\t * If the current url starts with the id it returns 'active'\n\t\t * otherwise it will return '' an empty string. E.g.\n\t\t *\n\t\t *   # current url = '/products/1'\n\t\t *   getClass('/products') # returns 'active'\n\t\t *   getClass('/orders') # returns ''\n\t\t */\n\t\treturn $scope.getClass = function(id) {\n\t\t\tif($scope.activeNavId.substring(0, id.length) === id) {\n\t\t\t\treturn 'active';\n\t\t\t} else {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t};\n\t}\n]);\n","\nApp.controller('HeaderCtrl', ['$scope', function($scope) {\n   \n\n}]);","\nApp.controller('LandingCtrl', ['$scope', 'locations', function($scope, locationService) {\n    \n    locationService.getAll(function(locations) {\n        $scope.locations = locations;\n    });\n    \n    $scope.searchterm = \"Oakland\";\n\n}]);","App.controller('MapCtrl', ['$scope', function($scope) {  \n\t \n\t   $scope.map = {\n            center: {\n                latitude: 42.335243, \n                longitude: -83.049640\n            },\n            zoom: 12,\n        };\n}]);","App.controller('ReviewCtrl', ['$scope', '$stateParams', 'locations', function($scope, $stateParams, locationService) {\n    if ($stateParams.locationId) {\n        locationService.getLocation($stateParams.locationId, function(location) {\n            $scope.business = location.business;\n            $scope.reviewer = location.reviewer;\n\n        });\n    }\n}]);\n\n","\nApp.controller('ReviewHeaderCtrl', ['$scope', function($scope) {\n   \n\n}]);","App.controller('ReviewMapCtrl', ['$scope', function($scope) {\n\n    $scope.map = {\n        center: {\n            latitude: 42.335243, \n            longitude: -83.049640\n        },\n        zoom: 16,\n        zoomControl: false,\n        scaleControl: false\n    };\t\n\t\n}]);","'use strict';\n/* Directives*/\n\n// register the module with Angular\nApp.directive('appVersion', [ // require the 'app.service' module\n\t'version', function(version) {\n\t\treturn function(scope, elm, attrs) {\n\t\t\treturn elm.text(version);\n\t\t};\n\t}\n]);","'use strict';\n/* Filters*/\n\nApp.filter('interpolate', [\n\t'version', function(version) {\n\t\treturn function(text) {\n\t\t\treturn String(text).replace(/\\%VERSION\\%/mg, version);\n\t\t};\n\t}\n]);","'use strict';\n\n/* Location Sevices */\n\nApp.factory('locations', ['$http', function($http) {\n    var locations;\n\n    var service =  {\n        getAll: function(callback) {\n            if (locations) {\n                callback(locations);\n            } else {\n                $http.get('/json/locations.json')\n                    .success(function(data) {\n                        locations = data;\n                        callback(locations);\n                    })\n                    .error(function(data, status) {\n                        console.error('Error (' + status + '):\\n' + data);\n                    });\n            }\n        },\n        getLocation: function(locationId, callback) {\n            service.getAll(function(locations) {\n                if (locations.length) {\n                    for (var i in locations) {\n                        var location = locations[i];\n\n                        if (location.id == locationId) {\n                            callback(location);\n                            break;\n                        }\n                    }\n                }\n            });\n        }\n    };\n\n    return service;\n}]);","'use strict';\n/* Sevices*/\n\nApp.factory('version', function() {\n\treturn \"0.4.0\";\n});"]}